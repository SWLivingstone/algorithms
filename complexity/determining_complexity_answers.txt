1. O(1)
  This algorithm will run in constant time.  It takes in a variable n and
  then prints a string with n.  No mater how large n is only one statement
  will be printed.

2. 0(n)
  This algorithm will grow at a linear rate.  A collection is given as input
  and then the entire collection is looped through once.  This means that
  the code within the loop will run n times where n is the size of the collection.

3. 0(c * s)
  c = size of collection
  s = size of largest sub-collection
  A collection is given as input.  The collection contains sub-collections.
  A loop will run some code for each sub-collection in the collection so we
  have a time of 0(c).  For each item in each sub-collection another loop will
  run some more code with a time of O(s).  We then multiply them together to get
  O(c * s)

4. 0(2^n)
  This is a recursive function with 2 recursive calls made each time.
  This means that the funtion will be run twice for each level of recursion.
  There will be n levels of recursion so we have a run time of 2 to the power of n.

5. O(n)
  A basic iterative function that will run n-1 times where n is the input.

6. 0(n^2)
  This is a quicksort algorithm and in the worst case n*n or n^2 arrays will
  need to be created in order to sort.  This would happen if the pivot happend
  to be either the lowest number or the highest number in each sub-array.  This
  means that we would only have a sorted array if each sub-array was reduced to a
  size of 1.
